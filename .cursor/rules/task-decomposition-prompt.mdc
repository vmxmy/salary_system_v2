---
description: 
globs: 
alwaysApply: false
---
# 任务分解推理提示词生成规则

## 核心原则
✅ **任务分解框架**：将复杂任务分解为可管理的子任务序列  
✅ **渐进式细化**：从高层次目标开始，逐步细化到具体操作  
✅ **依赖关系识别**：明确子任务之间的先后顺序和依赖关系  

## 分解步骤
1. **定义最终目标**  
   - 清晰描述任务的最终交付成果
   - 示例: "实现用户注册功能"

2. **识别关键阶段**  
   - 将任务划分为3-5个主要阶段
   - 示例阶段: 设计 → 开发 → 测试 → 部署

3. **细化操作步骤**  
   - 每个阶段分解为具体可执行动作
   - 使用动作动词描述: 创建、修改、验证等
   - 示例: 
     - 设计: 创建ER图
     - 开发: 编写API端点

4. **标记依赖关系**  
   - 使用`[前置条件]`标记步骤依赖
   - 示例: "编写测试用例 [依赖] 完成API开发"

5. **定义验收标准**  
   - 为每个步骤添加`{验收标准}`说明
   - 示例: "用户数据持久化 {验证: 数据库记录检查}"

## 提示词模板
```prompt
请基于以下任务进行分解:
[任务描述]

使用以下结构生成分解方案:
1. 最终目标: 
2. 关键阶段:
   - 阶段1: 
   - 阶段2: 
3. 详细步骤:
   - [阶段1]:
     - 步骤A: 
     - 步骤B: 
   - [阶段2]:
     - 步骤C: 
4. 依赖关系:
   - [步骤X] 依赖 [步骤Y]
5. 验收标准:
   - 步骤A: {标准}
```

## 示例应用
**任务描述**: 在薪资系统中添加导出PDF功能  
**生成分解**:
1. 最终目标: 实现薪资单PDF导出功能
2. 关键阶段:
   - 数据准备 → PDF生成 → 文件导出
3. 详细步骤:
   - 数据准备:
     - 步骤A: 创建薪资数据API端点
     - 步骤B: 设计PDF模板结构
   - PDF生成:
     - 步骤C: 集成PDF生成库
   - 文件导出:
     - 步骤D: 实现下载按钮组件
4. 依赖关系:
   - 步骤C [依赖] 步骤A和步骤B
5. 验收标准:
   - 步骤C: {生成PDF包含所有薪资字段}
