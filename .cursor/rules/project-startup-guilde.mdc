---
description: 
globs: 
alwaysApply: false
---
核心指导原则
1. 清晰与简洁 (Clarity & Simplicity)： 代码应易于理解和阅读，而非仅仅工作。追求最简单、最直观的解决方案。
2. 单一职责 (Single Responsibility)： 确保每个模块、函数、文件只做一件事，并把它做好。这能显著提高代码的可维护性。
3. 持续改进 (Continuous Improvement)： 永远保持学习和改进代码的意愿。如果发现可以做得更好的地方，主动提出并实施。
4. 团队协作 (Team Collaboration)： 我们是一个整体。积极沟通，互相帮助，共同解决问题。
关键实践领域
📚 1. 代码质量与规范 (Code Quality & Standards)
1.1 统一代码风格：
目的： 确保所有代码看起来像一个人写的一样，提高可读性。
行动： 我们将使用 [例如：ESLint, Prettier, Black, Flake8] 等自动化工具来强制执行代码格式。请确保你的开发环境已配置好这些工具，并在提交代码前运行它们。
提示： 使用一致的命名约定（驼峰命名、下划线命名等）。
1.2 代码文件长度：
目的： 保持文件可管理，降低理解和修改的认知负担。
行动：
理想情况下，单个代码文件行数控制在 200-500 行。
避免文件超过 800 行，如果发现，请积极考虑拆分。
单个方法/函数最好控制在 10-50 行，力求一屏显示完。
提示： 违反单一职责原则是文件过长的常见原因。
1.3 清晰的注释：
目的： 解释复杂逻辑或“为什么”要这样做的原因。
行动：
为公共函数/API 编写文档注释。
只在代码本身不够清晰时才添加行内注释。
删除冗余或过时的注释。
🔄 2. 版本控制 (Version Control - Git)
2.1 使用 Git：
目的： 高效管理代码变更，实现团队协作。
行动： 确保你已熟悉 Git 的基本操作 (clone, pull, add, commit, push, branch, merge/rebase)。
2.2 分支策略：
目的： 规范代码提交流程，隔离开发任务。
行动： 我们将采用 [例如：Git Flow / GitHub Flow / Trunk-Based Development] 作为主要分支策略。
功能分支： 每个新功能或 bug 修复都在一个独立的分支上进行开发（例如 feature/your-feature-name 或 bugfix/issue-id）。
频繁提交： 小步提交，每次提交只包含一个逻辑完整的更改。
清晰的提交信息： 提交信息应简洁明了，说明本次提交的 目的 和 内容。
2.3 频繁合并/Rebase：
目的： 避免长时间偏离主分支，减少合并冲突。
行动： 每天至少 pull 一次最新代码。在开始工作前，确保你的分支是最新的。在合并到主分支前，优先使用 rebase 保持提交历史干净。
🤝 3. 协作与审查 (Collaboration & Review)
3.1 代码审查 (Code Review)：
目的： 提高代码质量，分享知识，发现潜在问题。
行动： 所有的代码提交（Merge Request / Pull Request）都必须经过至少一位团队成员的审查和批准才能合并。
提示： 积极参与审查，提出建设性意见，并虚心接受他人反馈。
3.2 开放沟通：
目的： 及时解决问题，避免重复劳动。
行动：
遇到问题或有疑问时，请及时在 [例如：Slack, Teams, Discord] 或通过站会提出。
在开始复杂任务前，可以与团队成员讨论方案。
每次读取和编辑单个文件的操作上限为 250 行。如果任务涉及读取或修改超过此限制的文件内容，请务必将该任务拆解为多个独立的子任务，每个子任务处理不超过 250 行的内容。
🧪 4. 测试 (Testing)
4.1 编写可测试的代码：
目的： 确保代码功能正确，方便自动化测试。
行动： 在设计和编写代码时，就考虑如何对其进行测试。
4.2 单元测试 (Unit Tests)：
目的： 验证最小代码单元的正确性。
行动： 对于核心业务逻辑和复杂功能，尽可能编写单元测试。
📝 5. 文档 (Documentation)
5.1 README.md：
目的： 提供项目概览和快速启动指南。
行动： 确保项目的 README.md 文件包含清晰的项目描述、安装运行步骤、开发指南等必要信息。
5.2 API 文档：
目的： 明确接口功能、参数和返回值。
行动： 如果项目包含 API 接口，请确保其有清晰的文档（例如使用 Swagger/OpenAPI）。