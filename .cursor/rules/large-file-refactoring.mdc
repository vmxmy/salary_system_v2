---
description: 
globs: 
alwaysApply: false
---
# 大型代码文件拆分作业规范 (Large File Refactoring Guidelines)

当遇到超过800行的大型代码文件需要拆分时，应遵循以下标准化流程：

## 🎯 适用场景
- 单个文件超过800行
- 文件包含多个不相关的功能模块
- 代码维护困难，需要频繁滚动查看
- 违反单一职责原则的复杂文件

## 📋 标准化拆分流程

### 阶段一：分析与规划 (Analysis & Planning)

**1. 功能映射**
- 完整分析原文件的所有函数、类和功能模块
- 绘制功能关系图，理解数据流和调用关系
- 识别公共依赖和工具函数

**2. 职责识别**
- 基于单一职责原则，将功能按业务领域分组
- 常见分组模式：CRUD操作、数据统计、预览功能、模板管理、执行记录等
- 确保每个分组都有明确的业务含义

**3. 依赖分析**
- 识别模块间的依赖关系和数据传递
- 确保拆分后不会产生循环依赖
- 分离共享工具函数和常量

**4. 接口设计**
- 设计统一接口层，确保拆分后的向后兼容性
- 保持原有公开API不变
- 规划新模块的导入导出结构

### 阶段二：分步拆分 (Step-by-Step Refactoring)

**1. 核心优先策略**
- 先拆分核心基础功能模块
- 为其他模块提供稳定的依赖基础
- 避免一次性拆分过多模块

**2. 功能完整性**
- 每个拆分的模块必须包含完整的功能实现
- 不留"半成品"或不完整的功能
- 确保模块内部逻辑自洽

**3. 文件规模控制**
- 理想范围：200-500行
- 可接受范围：500-800行
- 超过800行必须进一步拆分

**4. 命名规范**
- 使用清晰的文件命名，反映模块核心职责
- 遵循项目现有命名约定
- 文件名应具有自解释性

### 阶段三：集成与验证 (Integration & Validation)

**1. 导入更新**
- 更新所有相关的import语句
- 修改 [__init__.py](mdc:__init__.py) 等模块初始化文件
- 确保导入路径正确

**2. 接口测试**
- 验证所有公开API的功能完整性
- 测试模块间的集成工作
- 确保数据结构匹配

**3. 问题修复**
- 及时修复拆分过程中暴露的问题
- 处理数据结构不匹配等集成问题
- 验证错误处理逻辑

**4. 文档更新**
- 更新相关技术文档
- 说明新的模块结构和使用方法
- 记录拆分决策和设计理念

## ⚠️ 质量控制标准

### 文件层面
- 每个模块文件不超过500行（理想）或800行（极限）
- 每个模块具有单一、明确的职责
- 文件内函数和类职责清晰

### 功能层面
- 拆分后的总功能不少于原文件
- 保持原有API的向后兼容性
- 新增功能必须完整实现

### 测试层面
- 所有单元测试和集成测试通过
- API接口功能验证正常
- 前后端集成测试成功

## 💡 最佳实践建议

### 拆分策略
1. **按业务领域拆分**：如用户管理、权限控制、数据分析等
2. **按操作类型拆分**：如CRUD操作、统计分析、数据导入导出等
3. **按数据实体拆分**：如员工信息、薪资数据、报表配置等

### 避免的陷阱
- 避免过度拆分导致文件碎片化
- 避免拆分后产生循环依赖
- 避免破坏原有的API合约
- 避免忽略模块间的数据一致性

### 命名约定
- 使用描述性的模块名称
- 保持命名风格一致
- 避免使用过于泛化的名称

## 🔧 工具支持

### 分析工具
- 使用代码分析工具识别功能边界
- 利用依赖关系图理解模块关联
- 通过测试覆盖率确保功能完整

### 验证方法
- 单元测试验证模块功能
- 集成测试验证模块协作
- API测试验证接口兼容性

## 🛠️ 操作实践指南

### 文件操作策略
**优先级顺序：**
1. **命令行操作优先**：当需要创建、编辑或移动文件时，优先使用 `touch`、`mkdir`、`mv`、`cp` 等命令行工具
2. **工具函数作为备选**：当命令行操作不可行时，再使用 `edit_file`、`search_replace` 等工具函数
3. **组合方式处理**：对于复杂操作，可以先用命令行创建文件结构，再用工具函数编辑内容

### 处理编辑失败的情况
**常见失败场景及应对方案：**

**1. 文件不存在错误**
- 使用 `touch filename.py` 先创建空文件
- 再用 `edit_file` 添加内容

**2. 权限问题**
- 检查文件和目录权限：`ls -la`
- 必要时使用 `chmod` 调整权限

**3. 编码问题**
- 使用 `file filename` 检查文件编码
- 必要时用 `iconv` 转换编码格式

**4. 大文件操作失败**
- 分段处理：将大文件拆分为多个小文件分别编辑
- 使用命令行工具如 `sed`、`awk` 进行批量修改

**5. 搜索替换失败**
- 使用 `grep -n "search_string" filename` 先确认内容存在
- 检查特殊字符是否需要转义
- 使用 `sed` 作为备选方案

### 备用操作流程
```bash
# 创建目录结构
mkdir -p module/submodule

# 创建文件
touch module/new_file.py

# 检查文件状态
ls -la module/

# 备份重要文件
cp original_file.py original_file.py.bak

# 使用命令行编辑（简单修改）
echo "# New module" > module/new_file.py

# 验证文件内容
cat module/new_file.py
```

### 故障排除检查清单
- [ ] 文件路径是否正确
- [ ] 目录是否存在
- [ ] 文件权限是否足够
- [ ] 磁盘空间是否充足
- [ ] 文件是否被其他进程占用
- [ ] 搜索字符串是否完全匹配
- [ ] 特殊字符是否正确转义

---

遵循此规范可以确保大型文件拆分工作的系统性、安全性和可维护性，避免在重构过程中引入新的问题或破坏现有功能。同时通过合理的工具选择和故障处理机制，提高操作成功率和工作效率。
