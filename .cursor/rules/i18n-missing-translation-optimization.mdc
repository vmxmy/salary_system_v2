---
description:
globs:
alwaysApply: false
---
# i18n 翻译缺失报错最优化处理流程

## 📋 概述

本规则定义了处理 i18n 翻译缺失报错的标准化最优流程，确保快速、准确地定位和修复翻译问题，提升开发效率和用户体验。

## 🎯 适用场景

- 💻 前端开发过程中遇到翻译 key 缺失
- 🔍 浏览器控制台出现 i18n 相关错误
- 📝 代码审查时发现硬编码文本
- 🚀 部署前的翻译完整性检查

## ⚡ 快速处理流程

### 1. 错误识别与分类

**🔍 常见错误模式:**
```javascript
// 控制台错误示例
i18next::translator: missingKey zh-CN common buttons.save
i18next::translator: missingKey en common buttons.save
```

**📊 错误分类优先级:**
- 🔴 **P0 - 关键路径**: 登录、主要业务流程页面
- 🟠 **P1 - 重要功能**: 数据录入、报表查看页面  
- 🟡 **P2 - 一般功能**: 设置页面、帮助文档
- 🟢 **P3 - 边缘场景**: 错误页面、调试工具

### 2. 自动化检测工具链

**🛠️ 工具执行顺序:**

```bash
# 1. 提取所有翻译 key (在 frontend/v2 目录下执行)
npm run i18n:scan

# 2. 检查翻译文件完整性
npm run build 2>&1 | grep -i "i18n\|translation\|missing"

# 3. 使用 i18next-parser 分析缺失 key
npx i18next-parser --config i18next-parser.config.cjs --verbose
```

**📁 关键配置文件:**
- [i18next-parser.config.cjs](mdc:frontend/v2/i18next-parser.config.cjs)
- [i18n.ts](mdc:frontend/v2/src/i18n.ts)
- [I18N_GUIDELINES.md](mdc:frontend/v2/I18N_GUIDELINES.md)

### 3. 批量修复策略

**🎯 修复优先级策略:**

1. **收集阶段** - 系统性收集所有错误
   ```bash
   # 使用 Playwright 自动化浏览收集错误
   # 参考: i18n_errors_collection.md
   ```

2. **分析阶段** - 按命名空间和优先级分组
   ```javascript
   // 按命名空间分组缺失的 key
   const missingKeys = {
     'common': ['buttons.save', 'labels.name'],
     'payroll': ['status.pending', 'actions.calculate'],
     'employee': ['fields.position', 'tabs.personal']
   };
   ```

3. **修复阶段** - 批量添加翻译
   ```json
   // 示例: public/locales/zh-CN/common.json
   {
     "buttons": {
       "save": "保存",
       "cancel": "取消",
       "confirm": "确认"
     },
     "labels": {
       "name": "姓名",
       "status": "状态"
     }
   }
   ```

### 4. 代码层面最佳实践

**✅ 推荐写法:**
```typescript
// 1. 静态 key，便于工具提取
const { t } = useTranslation(['payroll', 'common']);
const title = t('payroll:page_title'); // 明确命名空间

// 2. 嵌套结构访问
const buttonText = t('buttons.save'); // 对应 JSON 中 buttons.save

// 3. 带默认值的安全调用
const label = t('employee.fields.position', { defaultValue: '职位' });
```

**❌ 避免写法:**
```typescript
// 1. 动态拼接 key（工具难以提取）
const key = 'buttons.' + action; // 不推荐
const text = t(key);

// 2. 硬编码文本
const title = '薪资管理'; // 应该使用 t('payroll:page_title')

// 3. 扁平化 key
const text = t('buttons_save'); // 应该使用 buttons.save
```

### 5. 验证与测试流程

**🧪 验证步骤:**

1. **编译时检查**
   ```bash
   cd frontend/v2
   npm run build # 检查 TypeScript 编译错误
   ```

2. **运行时检查**
   ```bash
   npm run dev # 启动开发服务器
   # 访问相关页面，检查控制台是否还有 i18n 错误
   ```

3. **自动化测试**
   ```bash
   # 使用 Playwright 自动化检查所有页面
   # 确保没有翻译缺失错误
   ```

## 📂 文件组织规范

**🗂️ 翻译文件结构:**
```
frontend/v2/public/locales/
├── zh-CN/
│   ├── common.json      # 通用翻译
│   ├── payroll.json     # 薪资模块
│   ├── employee.json    # 员工模块
│   └── admin.json       # 管理模块
└── en/
    ├── common.json
    ├── payroll.json
    ├── employee.json
    └── admin.json
```

**🔤 命名空间约定:**
- `common`: 全局共享的按钮、标签、状态
- `payroll`: 薪资管理相关页面和功能
- `employee`: 员工管理相关页面和功能
- `admin`: 系统管理和权限相关功能

## 🚀 应急处理方案

**⚡ 快速修复模式:**

当遇到紧急情况需要快速修复时：

1. **临时修复** - 添加缺失 key 到对应翻译文件
2. **保持一致** - 确保中英文翻译文件同步更新
3. **记录问题** - 在 [i18n_errors_collection.md](mdc:frontend/v2/i18n_errors_collection.md) 中记录
4. **后续完善** - 计划时间进行系统性优化

## 📊 监控与预防

**🔍 持续监控:**
- 每次 PR 审查时检查新增的翻译 key
- 定期运行 `npm run i18n:scan` 检查完整性
- 在 CI/CD 中集成翻译检查步骤

**🛡️ 预防措施:**
- 使用 ESLint 插件检查硬编码文本
- 代码模板中包含正确的 i18n 用法
- 开发文档中强调翻译规范

## 📝 相关文档

- [I18N_GUIDELINES.md](mdc:frontend/v2/I18N_GUIDELINES.md) - 详细的 i18n 使用指南
- [i18n_errors_collection.md](mdc:frontend/v2/i18n_errors_collection.md) - 错误收集记录
- [i18next-parser.config.cjs](mdc:frontend/v2/i18next-parser.config.cjs) - 自动提取工具配置

---

💡 **提示**: 遵循此流程可以确保 i18n 翻译问题得到快速、系统性的解决，提升整体代码质量和用户体验。
