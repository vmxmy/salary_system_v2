# PayrollDataModal 技术架构文档

## 概述
PayrollDataModal 是一个复杂的数据展示和操作组件，基于 ProTable 实现薪资数据的查看、筛选、编辑和导出功能。

## 核心文件
主要组件文件：[PayrollDataModal.tsx](mdc:frontend/v2/src/pages/SimplePayroll/components/PayrollDataModal.tsx)

## 1. 数据获取机制

### 1.1 数据流向
```
后端API (/reports/payroll-modal/period/{periodId}) 
    ↓
fetchPayrollData() 函数
    ↓
批量模态框API响应 (modalDataList)
    ↓
数据转换 (transformedData)
    ↓
dataSource 状态
```

### 1.2 数据转换逻辑
```typescript
// 将模态框数据转换为表格数据格式
const transformedData: PayrollData[] = modalDataList.map((modalData: any, index: number) => ({
  id: modalData.薪资条目id || index,
  薪资条目id: modalData.薪资条目id,
  员工编号: modalData.基础信息.员工编号,
  员工姓名: modalData.基础信息.员工姓名,
  // 添加应发明细
  ...modalData.应发明细,
  // 添加扣除明细
  ...modalData.扣除明细.个人扣缴项目,
  ...modalData.扣除明细.单位扣缴项目,
  // 添加计算参数
  ...modalData.计算参数
}));
```

### 1.3 状态管理
- `dataSource`: 完整的原始数据
- `filteredDataSource`: 经过表格筛选后的数据
- `dynamicColumns`: 动态生成的列配置

## 2. 渲染显示机制

### 2.1 双层列控制架构
```
原始数据字段
    ↓
第一层：列筛选配置面板 (filterColumns)
    ↓
dynamicColumns (动态生成的列)
    ↓
第二层：ProTable列状态管理 (columnsState)
    ↓
最终显示列
```

### 2.2 列筛选配置 (第一层控制)
```typescript
interface ColumnFilterConfig {
  hideJsonbColumns: boolean;      // 隐藏JSONB列
  hideZeroColumns: boolean;       // 隐藏全零列
  hideEmptyColumns: boolean;      // 隐藏空列
  includePatterns: string[];      // 包含模式
  excludePatterns: string[];      // 排除模式
  minValueThreshold: number;      // 最小值阈值
  maxValueThreshold: number;      // 最大值阈值
  showOnlyNumericColumns: boolean; // 只显示数值列
}
```

### 2.3 ProTable列状态管理 (第二层控制)
```typescript
columnsState={{
  persistenceKey: 'payroll-data-table',
  persistenceType: 'localStorage',
  onChange: (newColumnsState) => {
    setCurrentColumnsState(newColumnsState || {});
  },
}}
```

### 2.4 数据格式化渲染
- `formatNumber()`: 数字格式化（2位小数，千分位分隔符）
- `formatDate()`: 日期格式化（YYYY年MM月）
- 布尔值渲染：✅/❌ 图标
- JSON数据：格式化显示

## 3. 数据筛选机制

### 3.1 筛选层次
```
1. 列筛选配置 (filterColumns) - 控制哪些列被生成
2. ProTable内置筛选 - 用户交互筛选
3. 搜索功能 - 员工姓名文本搜索
4. 分类筛选 - 部门、职位、人员类别等
```

### 3.2 筛选状态更新
```typescript
onChange={(pagination, filters, sorter, extra) => {
  // 更新筛选后的数据
  if (extra.currentDataSource) {
    setFilteredDataSource(extra.currentDataSource);
  }
}}
```

### 3.3 高级筛选功能
- 通配符模式匹配 (`*`, `?`)
- 数值范围筛选
- 快速预设（工资相关、保险公积金等）

## 4. 导出Excel映射机制

### 4.1 导出数据流
```
filteredDataSource (筛选后的完整数据)
    ↓
获取ProTable列状态 (currentColumnsState)
    ↓
确定可见列和顺序 (visibleColumns)
    ↓
应用渲染逻辑 (processValue)
    ↓
生成Excel数据 (exportData)
    ↓
XLSX文件输出
```

### 4.2 列状态映射
```typescript
const visibleColumns = dynamicColumns
  .filter(col => col.key !== 'action')
  .filter(col => {
    const columnState = currentColumnsState[columnKey];
    return columnState?.show !== false;
  })
  .sort((a, b) => {
    const orderA = currentColumnsState[keyA]?.order || 999;
    const orderB = currentColumnsState[keyB]?.order || 999;
    return orderA - orderB;
  });
```

### 4.3 渲染逻辑复用
```typescript
const processValue = (rawValue: any, column: ProColumns<PayrollData>, record: PayrollData, index: number) => {
  if (column.render) {
    const renderResult = column.render(rawValue, record, index, {} as any, {} as any);
    const textContent = extractTextFromRender(renderResult);
    // 转换为Excel适用的格式
  }
  return cleanValue(rawValue);
};
```

## 5. 组件交互机制

### 5.1 操作功能
- 查看详情：`handleViewDetail()` → `PayrollEntryDetailModal`
- 编辑记录：`handleEdit()` → `PayrollEntryFormModal`
- 删除记录：预留接口，显示开发中提示
- 批量删除：预留接口，显示开发中提示

### 5.2 状态同步
- 编辑成功后自动刷新数据：`handleEditSuccess()`
- 列配置变化实时响应：`columnsState.onChange`
- 筛选状态实时更新：`ProTable.onChange`

## 6. 性能优化策略

### 6.1 数据处理优化
- 使用 `useCallback` 缓存数据获取函数
- 分离数据源和筛选数据源
- 动态列生成缓存

### 6.2 渲染优化
- 虚拟滚动支持大数据量
- 列状态持久化到 localStorage
- 分页显示减少DOM节点

## 7. 错误处理机制

### 7.1 数据获取错误
```typescript
try {
  const response = await apiClient.get(`/reports/payroll-modal/period/${periodId}?limit=100`);
} catch (error: any) {
  message.error(`数据获取失败: ${error.message || '未知错误'}`);
}
```

### 7.2 渲染错误处理
```typescript
try {
  const renderResult = column.render(rawValue, record, index, {} as any, {} as any);
} catch (error) {
  console.warn('渲染函数执行失败:', error);
  return cleanValue(rawValue);
}
```

## 8. 扩展点和自定义

### 8.1 列配置扩展
- 新增筛选规则：修改 `ColumnFilterConfig` 接口
- 自定义渲染函数：在列定义中添加 `render` 属性
- 新增快速预设：在筛选配置面板添加预设按钮

### 8.2 操作功能扩展
- 新增操作按钮：在操作列的 `render` 函数中添加
- 批量操作：在 `tableAlertOptionRender` 中实现
- 自定义导出格式：修改 `handleExportExcel` 函数

## 9. 依赖关系

### 9.1 核心依赖
- `@ant-design/pro-components`: ProTable组件
- `antd`: UI组件库
- `xlsx`: Excel导出功能
- `react-i18next`: 国际化支持

### 9.2 API依赖
- `/reports/payroll-modal/period/{periodId}`: 批量模态框数据API
- `getPayrollEntryById()`: 获取单条薪资记录详情
- `payrollViewsApi`: 薪资视图相关API

## 10. 最佳实践

### 10.1 代码组织
- 功能函数按职责分组
- 状态管理集中化
- 类型定义清晰

### 10.2 用户体验
- 加载状态提示
- 错误信息友好显示
- 操作反馈及时
- 配置持久化保存

### 10.3 维护性
- 详细的调试日志
- 清晰的注释说明
- 模块化的功能设计
- 统一的错误处理
