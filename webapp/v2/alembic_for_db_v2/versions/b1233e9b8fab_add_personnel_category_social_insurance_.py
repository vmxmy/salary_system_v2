"""Add personnel category social insurance rules association table

Revision ID: b1233e9b8fab
Revises: e5b0a567754e
Create Date: 2025-06-11 10:07:47.663103

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b1233e9b8fab'
down_revision: Union[str, None] = 'e5b0a567754e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('personnel_category_social_insurance_rules',
    sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
    sa.Column('personnel_category_id', sa.BigInteger(), nullable=False),
    sa.Column('social_insurance_config_id', sa.BigInteger(), nullable=False),
    sa.Column('effective_date', sa.Date(), nullable=False, comment='关联生效日期'),
    sa.Column('end_date', sa.Date(), nullable=True, comment='关联结束日期'),
    sa.Column('is_active', sa.Boolean(), server_default='TRUE', nullable=False, comment='关联是否启用'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['personnel_category_id'], ['hr.personnel_categories.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['social_insurance_config_id'], ['payroll.social_insurance_configs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('personnel_category_id', 'social_insurance_config_id', 'effective_date', name='uq_personnel_ss_rule_effective'),
    schema='payroll'
    )
    op.drop_index('ix_reports_report_views_id', table_name='report_views', schema='reports')
    op.drop_table('report_views', schema='reports')
    op.drop_index('ix_reports_report_view_executions_id', table_name='report_view_executions', schema='reports')
    op.drop_table('report_view_executions', schema='reports')
    op.alter_column('batch_report_task_items', 'id',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='主键',
               existing_nullable=False,
               autoincrement=True,
               schema='config')
    op.alter_column('batch_report_task_items', 'task_id',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='任务ID',
               existing_nullable=False,
               schema='config')
    op.alter_column('batch_report_task_items', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_comment='创建时间',
               existing_server_default=sa.text('now()'),
               schema='config')
    op.alter_column('batch_report_task_items', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_comment='更新时间',
               existing_server_default=sa.text('now()'),
               schema='config')
    op.create_index(op.f('ix_config_batch_report_task_items_id'), 'batch_report_task_items', ['id'], unique=False, schema='config')
    op.alter_column('batch_report_tasks', 'id',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='主键',
               existing_nullable=False,
               autoincrement=True,
               schema='config')
    op.create_index(op.f('ix_config_batch_report_tasks_id'), 'batch_report_tasks', ['id'], unique=False, schema='config')
    op.drop_constraint('uq_payroll_component_definitions_name', 'payroll_component_definitions', schema='config', type_='unique')
    op.alter_column('report_file_manager', 'id',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='主键',
               existing_nullable=False,
               autoincrement=True,
               schema='config')
    op.create_index(op.f('ix_config_report_file_manager_id'), 'report_file_manager', ['id'], unique=False, schema='config')
    op.drop_index('idx_employees_active_dept', table_name='employees', schema='hr', postgresql_where='(is_active = true)')
    op.drop_index('idx_employees_category_id', table_name='employees', schema='hr')
    op.drop_index('idx_employees_department_id', table_name='employees', schema='hr')
    op.drop_index('idx_employees_housing_fund_client_number', table_name='employees', schema='hr')
    op.drop_index('idx_employees_position_id', table_name='employees', schema='hr')
    op.drop_index('idx_employees_social_security_client_number', table_name='employees', schema='hr')
    op.drop_index('idx_personnel_categories_parent', table_name='personnel_categories', schema='hr')
    op.drop_index('idx_personnel_categories_tree', table_name='personnel_categories', schema='hr')
    op.drop_index('idx_audit_rules_category_enabled', table_name='audit_rule_configurations', schema='payroll')
    op.drop_index('idx_audit_rules_effective_date', table_name='audit_rule_configurations', schema='payroll')
    op.drop_index('idx_monthly_snapshots_audit_status', table_name='monthly_payroll_snapshots', schema='payroll')
    op.drop_index('idx_monthly_snapshots_deductions_gin', table_name='monthly_payroll_snapshots', schema='payroll', postgresql_using='gin')
    op.drop_index('idx_monthly_snapshots_earnings_gin', table_name='monthly_payroll_snapshots', schema='payroll', postgresql_using='gin')
    op.drop_index('idx_monthly_snapshots_period_employee', table_name='monthly_payroll_snapshots', schema='payroll')
    op.drop_index('idx_monthly_snapshots_snapshot_date', table_name='monthly_payroll_snapshots', schema='payroll')
    op.drop_constraint('uq_monthly_snapshot_period_employee', 'monthly_payroll_snapshots', schema='payroll', type_='unique')
    op.drop_index('idx_audit_anomalies_can_auto_fix', table_name='payroll_audit_anomalies', schema='payroll')
    op.drop_index('idx_audit_anomalies_created_at', table_name='payroll_audit_anomalies', schema='payroll')
    op.drop_index('idx_audit_anomalies_employee', table_name='payroll_audit_anomalies', schema='payroll')
    op.drop_index('idx_audit_anomalies_is_ignored', table_name='payroll_audit_anomalies', schema='payroll')
    op.drop_index('idx_audit_anomalies_payroll_entry', table_name='payroll_audit_anomalies', schema='payroll')
    op.drop_index('idx_audit_anomalies_payroll_run', table_name='payroll_audit_anomalies', schema='payroll')
    op.drop_index('idx_audit_anomalies_type_severity', table_name='payroll_audit_anomalies', schema='payroll')
    op.drop_index('idx_audit_history_auditor_timestamp', table_name='payroll_audit_history', schema='payroll')
    op.drop_index('idx_audit_history_payroll_entry', table_name='payroll_audit_history', schema='payroll')
    op.drop_index('idx_audit_history_payroll_run', table_name='payroll_audit_history', schema='payroll')
    op.drop_index('idx_audit_history_result_gin', table_name='payroll_audit_history', schema='payroll', postgresql_using='gin')
    op.drop_index('idx_audit_history_type_status', table_name='payroll_audit_history', schema='payroll')
    op.drop_index('idx_payroll_entries_audit_status', table_name='payroll_entries', schema='payroll')
    op.drop_index('idx_payroll_entries_audit_timestamp', table_name='payroll_entries', schema='payroll')
    op.drop_index('idx_payroll_entries_auditor_id', table_name='payroll_entries', schema='payroll')
    op.drop_index('idx_payroll_entries_calculated_at', table_name='payroll_entries', schema='payroll')
    op.drop_index('idx_payroll_entries_calculation_gin', table_name='payroll_entries', schema='payroll', postgresql_using='gin')
    op.drop_index('idx_payroll_entries_calculation_inputs_gin', table_name='payroll_entries', schema='payroll', postgresql_using='gin')
    op.drop_index('idx_payroll_entries_deductions_details_gin', table_name='payroll_entries', schema='payroll', postgresql_using='gin')
    op.drop_index('idx_payroll_entries_deductions_gin', table_name='payroll_entries', schema='payroll', postgresql_using='gin')
    op.drop_index('idx_payroll_entries_earnings_details_gin', table_name='payroll_entries', schema='payroll', postgresql_using='gin')
    op.drop_index('idx_payroll_entries_earnings_gin', table_name='payroll_entries', schema='payroll', postgresql_using='gin')
    op.drop_index('idx_payroll_entries_employee_id', table_name='payroll_entries', schema='payroll')
    op.drop_index('idx_payroll_entries_employee_period', table_name='payroll_entries', schema='payroll')
    op.drop_index('idx_payroll_entries_period_employee', table_name='payroll_entries', schema='payroll')
    op.drop_index('idx_payroll_entries_period_id', table_name='payroll_entries', schema='payroll')
    op.drop_index('idx_payroll_entries_period_run', table_name='payroll_entries', schema='payroll')
    op.drop_index('idx_payroll_entries_run_id', table_name='payroll_entries', schema='payroll')
    op.drop_index('idx_audit_summary_anomalies_by_type_gin', table_name='payroll_run_audit_summary', schema='payroll', postgresql_using='gin')
    op.drop_index('idx_audit_summary_created_at', table_name='payroll_run_audit_summary', schema='payroll')
    op.drop_index('idx_audit_summary_details_gin', table_name='payroll_run_audit_summary', schema='payroll', postgresql_using='gin')
    op.drop_index('idx_audit_summary_payroll_run', table_name='payroll_run_audit_summary', schema='payroll')
    op.drop_index('idx_audit_summary_status', table_name='payroll_run_audit_summary', schema='payroll')
    op.drop_index('idx_audit_summary_type', table_name='payroll_run_audit_summary', schema='payroll')
    op.drop_constraint('uq_audit_summary_payroll_run_type', 'payroll_run_audit_summary', schema='payroll', type_='unique')
    op.alter_column('social_insurance_configs', 'id',
               existing_type=sa.INTEGER(),
               server_default=sa.Identity(always=True),
               type_=sa.BigInteger(),
               existing_nullable=False,
               autoincrement=True,
               schema='payroll')
    op.drop_index('ix_payroll_social_insurance_configs_id', table_name='social_insurance_configs', schema='payroll')
    op.drop_column('social_insurance_configs', 'applicable_personnel_categories', schema='payroll')
    op.alter_column('report_config_presets', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.alter_column('report_config_presets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.drop_index('idx_report_config_presets_active', table_name='report_config_presets', schema='reports')
    op.drop_index('idx_report_config_presets_category', table_name='report_config_presets', schema='reports')
    op.create_index('idx_report_preset_active_category', 'report_config_presets', ['is_active', 'category'], unique=False, schema='reports')
    op.create_index('idx_report_preset_public', 'report_config_presets', ['is_public'], unique=False, schema='reports')
    op.create_index(op.f('ix_reports_report_config_presets_id'), 'report_config_presets', ['id'], unique=False, schema='reports')
    op.create_foreign_key(None, 'report_config_presets', 'users', ['created_by'], ['id'], source_schema='reports', referent_schema='security')
    op.alter_column('report_field_definitions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.alter_column('report_field_definitions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.drop_index('idx_report_field_definitions_order', table_name='report_field_definitions', schema='reports')
    op.drop_index('idx_report_field_definitions_type', table_name='report_field_definitions', schema='reports')
    op.create_index('idx_report_field_type_name', 'report_field_definitions', ['report_type_id', 'field_name'], unique=False, schema='reports')
    op.create_index('idx_report_field_visible_order', 'report_field_definitions', ['is_visible', 'display_order'], unique=False, schema='reports')
    op.create_index(op.f('ix_reports_report_field_definitions_id'), 'report_field_definitions', ['id'], unique=False, schema='reports')
    op.drop_constraint('report_field_definitions_report_type_id_fkey', 'report_field_definitions', schema='reports', type_='foreignkey')
    op.create_foreign_key(None, 'report_field_definitions', 'report_type_definitions', ['report_type_id'], ['id'], source_schema='reports', referent_schema='reports')
    op.alter_column('report_type_definitions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.alter_column('report_type_definitions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.drop_index('idx_report_type_definitions_active', table_name='report_type_definitions', schema='reports')
    op.drop_index('idx_report_type_definitions_category', table_name='report_type_definitions', schema='reports')
    op.drop_index('idx_report_type_definitions_code', table_name='report_type_definitions', schema='reports')
    op.create_index('idx_report_type_active_category', 'report_type_definitions', ['is_active', 'category'], unique=False, schema='reports')
    op.create_index('idx_report_type_code', 'report_type_definitions', ['code'], unique=False, schema='reports')
    op.create_index(op.f('ix_reports_report_type_definitions_id'), 'report_type_definitions', ['id'], unique=False, schema='reports')
    op.create_foreign_key(None, 'report_type_definitions', 'users', ['updated_by'], ['id'], source_schema='reports', referent_schema='security')
    op.create_foreign_key(None, 'report_type_definitions', 'users', ['created_by'], ['id'], source_schema='reports', referent_schema='security')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'report_type_definitions', schema='reports', type_='foreignkey')
    op.drop_constraint(None, 'report_type_definitions', schema='reports', type_='foreignkey')
    op.drop_index(op.f('ix_reports_report_type_definitions_id'), table_name='report_type_definitions', schema='reports')
    op.drop_index('idx_report_type_code', table_name='report_type_definitions', schema='reports')
    op.drop_index('idx_report_type_active_category', table_name='report_type_definitions', schema='reports')
    op.create_index('idx_report_type_definitions_code', 'report_type_definitions', ['code'], unique=False, schema='reports')
    op.create_index('idx_report_type_definitions_category', 'report_type_definitions', ['category'], unique=False, schema='reports')
    op.create_index('idx_report_type_definitions_active', 'report_type_definitions', ['is_active'], unique=False, schema='reports')
    op.alter_column('report_type_definitions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.alter_column('report_type_definitions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.drop_constraint(None, 'report_field_definitions', schema='reports', type_='foreignkey')
    op.create_foreign_key('report_field_definitions_report_type_id_fkey', 'report_field_definitions', 'report_type_definitions', ['report_type_id'], ['id'], source_schema='reports', referent_schema='reports', ondelete='CASCADE')
    op.drop_index(op.f('ix_reports_report_field_definitions_id'), table_name='report_field_definitions', schema='reports')
    op.drop_index('idx_report_field_visible_order', table_name='report_field_definitions', schema='reports')
    op.drop_index('idx_report_field_type_name', table_name='report_field_definitions', schema='reports')
    op.create_index('idx_report_field_definitions_type', 'report_field_definitions', ['report_type_id'], unique=False, schema='reports')
    op.create_index('idx_report_field_definitions_order', 'report_field_definitions', ['display_order'], unique=False, schema='reports')
    op.alter_column('report_field_definitions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.alter_column('report_field_definitions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.drop_constraint(None, 'report_config_presets', schema='reports', type_='foreignkey')
    op.drop_index(op.f('ix_reports_report_config_presets_id'), table_name='report_config_presets', schema='reports')
    op.drop_index('idx_report_preset_public', table_name='report_config_presets', schema='reports')
    op.drop_index('idx_report_preset_active_category', table_name='report_config_presets', schema='reports')
    op.create_index('idx_report_config_presets_category', 'report_config_presets', ['category'], unique=False, schema='reports')
    op.create_index('idx_report_config_presets_active', 'report_config_presets', ['is_active'], unique=False, schema='reports')
    op.alter_column('report_config_presets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.alter_column('report_config_presets', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'),
               schema='reports')
    op.add_column('social_insurance_configs', sa.Column('applicable_personnel_categories', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='适用的人员分类ID数组，如[75, 81]表示适用于公务员和机关工勤'), schema='payroll')
    op.create_index('ix_payroll_social_insurance_configs_id', 'social_insurance_configs', ['id'], unique=False, schema='payroll')
    op.alter_column('social_insurance_configs', 'id',
               existing_type=sa.BigInteger(),
               server_default=None,
               type_=sa.INTEGER(),
               existing_nullable=False,
               autoincrement=True,
               schema='payroll')
    op.create_unique_constraint('uq_audit_summary_payroll_run_type', 'payroll_run_audit_summary', ['payroll_run_id', 'audit_type'], schema='payroll', postgresql_nulls_not_distinct=False)
    op.create_index('idx_audit_summary_type', 'payroll_run_audit_summary', ['audit_type'], unique=False, schema='payroll')
    op.create_index('idx_audit_summary_status', 'payroll_run_audit_summary', ['audit_status'], unique=False, schema='payroll')
    op.create_index('idx_audit_summary_payroll_run', 'payroll_run_audit_summary', ['payroll_run_id'], unique=False, schema='payroll')
    op.create_index('idx_audit_summary_details_gin', 'payroll_run_audit_summary', ['audit_details'], unique=False, schema='payroll', postgresql_using='gin')
    op.create_index('idx_audit_summary_created_at', 'payroll_run_audit_summary', ['created_at'], unique=False, schema='payroll')
    op.create_index('idx_audit_summary_anomalies_by_type_gin', 'payroll_run_audit_summary', ['anomalies_by_type'], unique=False, schema='payroll', postgresql_using='gin')
    op.create_index('idx_payroll_entries_run_id', 'payroll_entries', ['payroll_run_id'], unique=False, schema='payroll')
    op.create_index('idx_payroll_entries_period_run', 'payroll_entries', ['payroll_period_id', 'payroll_run_id'], unique=False, schema='payroll')
    op.create_index('idx_payroll_entries_period_id', 'payroll_entries', ['payroll_period_id'], unique=False, schema='payroll')
    op.create_index('idx_payroll_entries_period_employee', 'payroll_entries', ['payroll_period_id', 'employee_id'], unique=False, schema='payroll')
    op.create_index('idx_payroll_entries_employee_period', 'payroll_entries', ['employee_id', 'payroll_period_id'], unique=False, schema='payroll')
    op.create_index('idx_payroll_entries_employee_id', 'payroll_entries', ['employee_id'], unique=False, schema='payroll')
    op.create_index('idx_payroll_entries_earnings_gin', 'payroll_entries', ['earnings_details'], unique=False, schema='payroll', postgresql_using='gin')
    op.create_index('idx_payroll_entries_earnings_details_gin', 'payroll_entries', ['earnings_details'], unique=False, schema='payroll', postgresql_using='gin')
    op.create_index('idx_payroll_entries_deductions_gin', 'payroll_entries', ['deductions_details'], unique=False, schema='payroll', postgresql_using='gin')
    op.create_index('idx_payroll_entries_deductions_details_gin', 'payroll_entries', ['deductions_details'], unique=False, schema='payroll', postgresql_using='gin')
    op.create_index('idx_payroll_entries_calculation_inputs_gin', 'payroll_entries', ['calculation_inputs'], unique=False, schema='payroll', postgresql_using='gin')
    op.create_index('idx_payroll_entries_calculation_gin', 'payroll_entries', ['calculation_inputs'], unique=False, schema='payroll', postgresql_using='gin')
    op.create_index('idx_payroll_entries_calculated_at', 'payroll_entries', ['calculated_at'], unique=False, schema='payroll')
    op.create_index('idx_payroll_entries_auditor_id', 'payroll_entries', ['auditor_id'], unique=False, schema='payroll')
    op.create_index('idx_payroll_entries_audit_timestamp', 'payroll_entries', ['audit_timestamp'], unique=False, schema='payroll')
    op.create_index('idx_payroll_entries_audit_status', 'payroll_entries', ['audit_status'], unique=False, schema='payroll')
    op.create_index('idx_audit_history_type_status', 'payroll_audit_history', ['audit_type', 'audit_status'], unique=False, schema='payroll')
    op.create_index('idx_audit_history_result_gin', 'payroll_audit_history', ['audit_result'], unique=False, schema='payroll', postgresql_using='gin')
    op.create_index('idx_audit_history_payroll_run', 'payroll_audit_history', ['payroll_run_id'], unique=False, schema='payroll')
    op.create_index('idx_audit_history_payroll_entry', 'payroll_audit_history', ['payroll_entry_id'], unique=False, schema='payroll')
    op.create_index('idx_audit_history_auditor_timestamp', 'payroll_audit_history', ['auditor_id', 'audit_timestamp'], unique=False, schema='payroll')
    op.create_index('idx_audit_anomalies_type_severity', 'payroll_audit_anomalies', ['anomaly_type', 'severity'], unique=False, schema='payroll')
    op.create_index('idx_audit_anomalies_payroll_run', 'payroll_audit_anomalies', ['payroll_run_id'], unique=False, schema='payroll')
    op.create_index('idx_audit_anomalies_payroll_entry', 'payroll_audit_anomalies', ['payroll_entry_id'], unique=False, schema='payroll')
    op.create_index('idx_audit_anomalies_is_ignored', 'payroll_audit_anomalies', ['is_ignored'], unique=False, schema='payroll')
    op.create_index('idx_audit_anomalies_employee', 'payroll_audit_anomalies', ['employee_id'], unique=False, schema='payroll')
    op.create_index('idx_audit_anomalies_created_at', 'payroll_audit_anomalies', ['created_at'], unique=False, schema='payroll')
    op.create_index('idx_audit_anomalies_can_auto_fix', 'payroll_audit_anomalies', ['can_auto_fix'], unique=False, schema='payroll')
    op.create_unique_constraint('uq_monthly_snapshot_period_employee', 'monthly_payroll_snapshots', ['period_id', 'employee_id'], schema='payroll', postgresql_nulls_not_distinct=False)
    op.create_index('idx_monthly_snapshots_snapshot_date', 'monthly_payroll_snapshots', ['snapshot_date'], unique=False, schema='payroll')
    op.create_index('idx_monthly_snapshots_period_employee', 'monthly_payroll_snapshots', ['period_id', 'employee_id'], unique=False, schema='payroll')
    op.create_index('idx_monthly_snapshots_earnings_gin', 'monthly_payroll_snapshots', ['earnings_details'], unique=False, schema='payroll', postgresql_using='gin')
    op.create_index('idx_monthly_snapshots_deductions_gin', 'monthly_payroll_snapshots', ['deductions_details'], unique=False, schema='payroll', postgresql_using='gin')
    op.create_index('idx_monthly_snapshots_audit_status', 'monthly_payroll_snapshots', ['audit_status'], unique=False, schema='payroll')
    op.create_index('idx_audit_rules_effective_date', 'audit_rule_configurations', ['effective_date', 'end_date'], unique=False, schema='payroll')
    op.create_index('idx_audit_rules_category_enabled', 'audit_rule_configurations', ['rule_category', 'is_enabled'], unique=False, schema='payroll')
    op.create_index('idx_personnel_categories_tree', 'personnel_categories', ['parent_category_id', 'id'], unique=False, schema='hr')
    op.create_index('idx_personnel_categories_parent', 'personnel_categories', ['parent_category_id'], unique=False, schema='hr')
    op.create_index('idx_employees_social_security_client_number', 'employees', ['social_security_client_number'], unique=False, schema='hr')
    op.create_index('idx_employees_position_id', 'employees', ['actual_position_id'], unique=False, schema='hr')
    op.create_index('idx_employees_housing_fund_client_number', 'employees', ['housing_fund_client_number'], unique=False, schema='hr')
    op.create_index('idx_employees_department_id', 'employees', ['department_id'], unique=False, schema='hr')
    op.create_index('idx_employees_category_id', 'employees', ['personnel_category_id'], unique=False, schema='hr')
    op.create_index('idx_employees_active_dept', 'employees', ['is_active', 'department_id'], unique=False, schema='hr', postgresql_where='(is_active = true)')
    op.drop_index(op.f('ix_config_report_file_manager_id'), table_name='report_file_manager', schema='config')
    op.alter_column('report_file_manager', 'id',
               existing_type=sa.BIGINT(),
               comment='主键',
               existing_nullable=False,
               autoincrement=True,
               schema='config')
    op.create_unique_constraint('uq_payroll_component_definitions_name', 'payroll_component_definitions', ['name'], schema='config', postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_config_batch_report_tasks_id'), table_name='batch_report_tasks', schema='config')
    op.alter_column('batch_report_tasks', 'id',
               existing_type=sa.BIGINT(),
               comment='主键',
               existing_nullable=False,
               autoincrement=True,
               schema='config')
    op.drop_index(op.f('ix_config_batch_report_task_items_id'), table_name='batch_report_task_items', schema='config')
    op.alter_column('batch_report_task_items', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_comment='更新时间',
               existing_server_default=sa.text('now()'),
               schema='config')
    op.alter_column('batch_report_task_items', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_comment='创建时间',
               existing_server_default=sa.text('now()'),
               schema='config')
    op.alter_column('batch_report_task_items', 'task_id',
               existing_type=sa.BIGINT(),
               comment='任务ID',
               existing_nullable=False,
               schema='config')
    op.alter_column('batch_report_task_items', 'id',
               existing_type=sa.BIGINT(),
               comment='主键',
               existing_nullable=False,
               autoincrement=True,
               schema='config')
    op.create_table('report_view_executions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('report_view_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('execution_params', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='执行参数(筛选条件等)'),
    sa.Column('result_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='结果数量'),
    sa.Column('execution_time', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True, comment='执行时间(秒)'),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'success'::character varying"), autoincrement=False, nullable=True, comment='执行状态: success, error'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='错误信息'),
    sa.Column('export_format', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='导出格式: excel, csv, pdf'),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='导出文件路径'),
    sa.Column('file_size', sa.BIGINT(), autoincrement=False, nullable=True, comment='文件大小(字节)'),
    sa.Column('executed_by', sa.BIGINT(), autoincrement=False, nullable=True, comment='执行者'),
    sa.Column('executed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='执行时间'),
    sa.ForeignKeyConstraint(['executed_by'], ['security.users.id'], name='report_view_executions_executed_by_fkey'),
    sa.ForeignKeyConstraint(['report_view_id'], ['reports.report_views.id'], name='report_view_executions_report_view_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='report_view_executions_pkey'),
    schema='reports'
    )
    op.create_index('ix_reports_report_view_executions_id', 'report_view_executions', ['id'], unique=False, schema='reports')
    op.create_table('report_views',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='报表名称'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='报表描述'),
    sa.Column('view_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False, comment='视图名称'),
    sa.Column('sql_query', sa.TEXT(), autoincrement=False, nullable=False, comment='SQL查询语句'),
    sa.Column('schema_name', sa.VARCHAR(length=50), server_default=sa.text("'reports'::character varying"), autoincrement=False, nullable=False, comment='视图所在模式'),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False, comment='是否激活'),
    sa.Column('is_public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False, comment='是否公开'),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='报表分类'),
    sa.Column('view_status', sa.VARCHAR(length=20), server_default=sa.text("'draft'::character varying"), autoincrement=False, nullable=True, comment='视图状态: draft, created, error'),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='最后同步时间'),
    sa.Column('sync_error', sa.TEXT(), autoincrement=False, nullable=True, comment='同步错误信息'),
    sa.Column('usage_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='使用次数'),
    sa.Column('last_used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='最后使用时间'),
    sa.Column('created_by', sa.BIGINT(), autoincrement=False, nullable=True, comment='创建者'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='更新时间'),
    sa.Column('report_title', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='报表标题'),
    sa.Column('description_lines', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='报表说明行列表'),
    sa.ForeignKeyConstraint(['created_by'], ['security.users.id'], name='report_views_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='report_views_pkey'),
    sa.UniqueConstraint('view_name', name='uq_report_views_view_name', postgresql_include=[], postgresql_nulls_not_distinct=False),
    schema='reports'
    )
    op.create_index('ix_reports_report_views_id', 'report_views', ['id'], unique=False, schema='reports')
    op.drop_table('personnel_category_social_insurance_rules', schema='payroll')
    # ### end Alembic commands ###
