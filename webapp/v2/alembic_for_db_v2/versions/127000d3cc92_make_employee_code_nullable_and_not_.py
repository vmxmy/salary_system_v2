"""make_employee_code_nullable_and_not_unique_on_hr_employees

Revision ID: 127000d3cc92
Revises: 427d09a2fdee
Create Date: 2025-05-19 06:17:48.545494

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '127000d3cc92'
down_revision: Union[str, None] = '427d09a2fdee'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    print("Applying upgrade: Making employee_code nullable and removing unique constraint from hr.employees")
    try:
        # Using a single batch_alter_table for all operations on the same table/schema
        with op.batch_alter_table('employees', schema='hr') as batch_op:
            # 1. Make employee_code nullable
            batch_op.alter_column('employee_code',
                               existing_type=sa.String(50), # Adjusted to String(50)
                               nullable=True)
            
            # 2. Drop the unique constraint
            # CONSTRAINT NAME IS 'employees_employee_code_key' (convention based on SQLAlchemy)
            # For unique constraints, the name might be auto-generated by the DB or explicitly named.
            # It's often safer to drop by column list if the name is uncertain, but Alembic's
            # batch mode prefers explicit name. Assuming 'employees_employee_code_key' is correct.
            # If this specific name fails, you might need to find the exact constraint name from your DB.
            batch_op.drop_constraint('employees_employee_code_key', type_='unique')
        
        print("Successfully altered employee_code to be nullable and dropped unique constraint.")

    except Exception as e:
        print(f"Error during upgrade: {e}")
        # It's often good to re-raise the exception so Alembic knows the migration failed
        raise
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    print("Applying downgrade: Making employee_code NOT nullable and re-adding unique constraint to hr.employees")
    try:
        with op.batch_alter_table('employees', schema='hr') as batch_op:
            # 1. Make employee_code NOT nullable
            batch_op.alter_column('employee_code',
                               existing_type=sa.String(50), # Adjusted to String(50)
                               nullable=False)

            # 2. Re-add the unique constraint
            batch_op.create_unique_constraint('employees_employee_code_key', ['employee_code'])
            
        print("Successfully reverted employee_code to NOT nullable and re-added unique constraint.")

    except Exception as e:
        print(f"Error during downgrade: {e}")
        raise
    # ### end Alembic commands ###
