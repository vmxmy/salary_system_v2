"""remove_old_report_tables

Revision ID: 65e450893a6c
Revises: create_report_views_tables
Create Date: 2025-05-30 22:31:59.217169

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = '65e450893a6c'
down_revision: Union[str, None] = 'create_report_views_tables'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('DROP TABLE IF EXISTS config.report_user_preferences CASCADE')
    op.execute('DROP TABLE IF EXISTS config.report_permissions CASCADE')
    op.execute('DROP TABLE IF EXISTS config.report_data_source_access_logs CASCADE')
    op.execute('DROP TABLE IF EXISTS config.report_executions CASCADE')
    op.execute('DROP TABLE IF EXISTS config.report_fields CASCADE')  # Corresponds to ReportTemplateField
    op.execute('DROP TABLE IF EXISTS config.report_data_source_fields CASCADE')
    op.execute('DROP TABLE IF EXISTS config.calculated_fields CASCADE')  # Corresponds to ReportCalculatedField
    op.execute('DROP TABLE IF EXISTS config.report_templates CASCADE')
    op.execute('DROP TABLE IF EXISTS config.report_data_sources CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Recreate tables in an order that respects dependencies.
    # Definitions are based on webapp/v2/models/reports.py and original migration scripts.

    # 1. report_data_sources
    op.create_table('report_data_sources',
        sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
        sa.Column('name', sa.String(length=200), nullable=False, comment="数据源名称"),
        sa.Column('code', sa.String(length=100), nullable=False, comment="数据源编码"),
        sa.Column('description', sa.Text(), nullable=True, comment="数据源描述"),
        sa.Column('category', sa.String(length=50), nullable=True, comment="数据源分类"),
        sa.Column('connection_type', sa.String(length=50), nullable=False, server_default="postgresql", comment="连接类型"),
        sa.Column('schema_name', sa.String(length=100), nullable=False, server_default="public", comment="模式名"),
        sa.Column('table_name', sa.String(length=255), nullable=True, comment="表名"),
        sa.Column('view_name', sa.String(length=100), nullable=True, comment="视图名"),
        sa.Column('custom_query', sa.Text(), nullable=True, comment="自定义查询SQL"),
        sa.Column('source_type', sa.String(length=20), nullable=False, server_default="table", comment="数据源类型"),
        sa.Column('connection_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="连接配置信息"),
        sa.Column('field_mapping', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="字段映射配置"),
        sa.Column('default_filters', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="默认筛选条件"),
        sa.Column('sort_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="默认排序配置"),
        sa.Column('access_level', sa.String(length=20), server_default="public", nullable=True, comment="访问级别: public, private, restricted"),
        sa.Column('allowed_roles', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="允许访问的角色列表"),
        sa.Column('allowed_users', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="允许访问的用户列表"),
        sa.Column('cache_enabled', sa.Boolean(), server_default=sa.text('false'), nullable=True, comment="是否启用缓存"),
        sa.Column('cache_duration', sa.Integer(), server_default='3600', nullable=True, comment="缓存时长(秒)"),
        sa.Column('max_rows', sa.Integer(), server_default='10000', nullable=True, comment="最大返回行数"),
        sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False, comment="是否激活"),
        sa.Column('is_system', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment="是否系统内置"),
        sa.Column('sort_order', sa.Integer(), server_default='0', nullable=False, comment="排序顺序"),
        sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="标签"),
        sa.Column('field_count', sa.Integer(), server_default='0', nullable=True, comment="字段数量"),
        sa.Column('usage_count', sa.Integer(), server_default='0', nullable=True, comment="使用次数"),
        sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True, comment="最后使用时间"),
        sa.Column('last_sync_at', sa.DateTime(timezone=True), nullable=True, comment="最后同步时间"),
        sa.Column('created_by', sa.BigInteger(), nullable=True, comment="创建者"),
        sa.Column('updated_by', sa.BigInteger(), nullable=True, comment="更新者"),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment="创建时间"),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment="更新时间"), # onupdate=func.now() handled by db typically or needs trigger
        sa.ForeignKeyConstraint(['created_by'], ['security.users.id'], name='fk_report_data_sources_created_by_users'),
        sa.ForeignKeyConstraint(['updated_by'], ['security.users.id'], name='fk_report_data_sources_updated_by_users'),
        sa.PrimaryKeyConstraint('id', name='pk_report_data_sources'),
        sa.UniqueConstraint('code', name='uq_report_data_sources_code'), # from model
        schema='config'
    )
    op.create_index('idx_data_source_type_active', 'report_data_sources', ['source_type', 'is_active'], schema='config', unique=False)
    op.create_index('idx_data_source_category', 'report_data_sources', ['category'], schema='config', unique=False)
    op.create_index('idx_data_source_schema_table', 'report_data_sources', ['schema_name', 'table_name'], schema='config', unique=False)


    # 2. report_templates
    op.create_table('report_templates',
        sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False, comment="模板名称"),
        sa.Column('title', sa.String(length=500), nullable=True, comment="自定义标题"),
        sa.Column('description', sa.Text(), nullable=True, comment="描述"),
        sa.Column('category', sa.String(length=100), nullable=True, comment="分类"),
        sa.Column('data_source_id', sa.BigInteger(), nullable=True, comment="数据源ID"),
        sa.Column('template_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment="模板配置"),
        sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False, comment="是否激活"),
        sa.Column('is_public', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment="是否公开"),
        sa.Column('sort_order', sa.Integer(), server_default='0', nullable=False, comment="排序顺序"),
        sa.Column('usage_count', sa.Integer(), server_default='0', nullable=False, comment="使用次数"),
        sa.Column('created_by', sa.BigInteger(), nullable=True, comment="创建者"), # Original was nullable=False
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment="创建时间"),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment="更新时间"),
        sa.ForeignKeyConstraint(['created_by'], ['security.users.id'], name='fk_report_templates_created_by_users'),
        sa.ForeignKeyConstraint(['data_source_id'], ['config.report_data_sources.id'], name='fk_report_templates_data_source_id'),
        sa.PrimaryKeyConstraint('id', name='pk_report_templates'),
        schema='config'
    )

    # 3. calculated_fields (from ReportCalculatedField model)
    op.create_table('calculated_fields',
        sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False, comment="字段名称"), # Model: String(100), Original Migration: String(255)
        sa.Column('alias', sa.String(length=100), nullable=False, comment="字段别名"), # Model: String(100), Original Migration: String(255)
        sa.Column('formula', sa.Text(), nullable=False, comment="计算公式"),
        sa.Column('return_type', sa.String(length=50), nullable=False, comment="返回类型"),
        sa.Column('description', sa.Text(), nullable=True, comment="描述"),
        sa.Column('display_name_zh', sa.String(length=100), nullable=True, comment="中文显示名称"),
        sa.Column('display_name_en', sa.String(length=100), nullable=True, comment="英文显示名称"),
        sa.Column('is_global', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否全局字段"), # Original: server_default='FALSE'
        sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否激活"),
        sa.Column('category', sa.String(length=50), nullable=True, comment="分类"), # Original: String(100)
        sa.Column('created_by', sa.BigInteger(), nullable=True, comment="创建者"), # Original was nullable=False
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment="创建时间"),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment="更新时间"),
        sa.ForeignKeyConstraint(['created_by'], ['security.users.id'], name='fk_calculated_fields_created_by_users'),
        sa.PrimaryKeyConstraint('id', name='pk_calculated_fields'),
        sa.UniqueConstraint('name', 'created_by', name='uq_calculated_field_name_user'), # From original migration
        schema='config'
    )

    # 4. report_data_source_fields
    op.create_table('report_data_source_fields',
        sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
        sa.Column('data_source_id', sa.BigInteger(), nullable=False),
        sa.Column('field_name', sa.String(length=100), nullable=False, comment="原始字段名"),
        sa.Column('field_alias', sa.String(length=100), nullable=True, comment="字段别名"),
        sa.Column('field_type', sa.String(length=50), nullable=False, comment="字段类型"),
        sa.Column('data_type', sa.String(length=50), nullable=True, comment="数据库数据类型"),
        sa.Column('display_name_zh', sa.String(length=200), nullable=True, comment="中文显示名称"),
        sa.Column('display_name_en', sa.String(length=200), nullable=True, comment="英文显示名称"),
        sa.Column('description', sa.Text(), nullable=True, comment="字段描述"),
        sa.Column('is_nullable', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否可为空"),
        sa.Column('is_primary_key', sa.Boolean(), server_default=sa.text('false'), nullable=True, comment="是否主键"),
        sa.Column('is_foreign_key', sa.Boolean(), server_default=sa.text('false'), nullable=True, comment="是否外键"),
        sa.Column('is_indexed', sa.Boolean(), server_default=sa.text('false'), nullable=True, comment="是否有索引"),
        sa.Column('is_visible', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否可见"),
        sa.Column('is_searchable', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否可搜索"),
        sa.Column('is_sortable', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否可排序"),
        sa.Column('is_filterable', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否可筛选"),
        sa.Column('is_exportable', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否可导出"),
        sa.Column('field_group', sa.String(length=50), nullable=True, comment="字段分组"),
        sa.Column('field_category', sa.String(length=50), nullable=True, comment="字段分类"),
        sa.Column('sort_order', sa.Integer(), server_default='0', nullable=True, comment="排序顺序"),
        sa.Column('format_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="格式化配置"),
        sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="验证规则"),
        sa.Column('lookup_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="查找表配置"),
        sa.Column('enable_aggregation', sa.Boolean(), server_default=sa.text('false'), nullable=True, comment="是否启用聚合"),
        sa.Column('aggregation_functions', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="可用聚合函数"),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment="创建时间"),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment="更新时间"),
        sa.ForeignKeyConstraint(['data_source_id'], ['config.report_data_sources.id'], name='fk_report_data_source_fields_ds_id', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name='pk_report_data_source_fields'),
        schema='config'
    )
    op.create_index('idx_ds_field_source_name', 'report_data_source_fields', ['data_source_id', 'field_name'], schema='config', unique=False)
    op.create_index('idx_ds_field_visible_sortable', 'report_data_source_fields', ['is_visible', 'sort_order'], schema='config', unique=False)

    # 5. report_fields (from ReportTemplateField model, table name from original migration)
    op.create_table('report_fields',
        sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
        sa.Column('template_id', sa.BigInteger(), nullable=False, comment="报表模板ID"),
        sa.Column('field_name', sa.String(length=100), nullable=False, comment="字段名"), # Model: String(100), Original Migration: String(255)
        sa.Column('field_alias', sa.String(length=100), nullable=True, comment="字段别名"), # Model: String(100), Original Migration: String(255)
        sa.Column('data_source', sa.String(length=50), nullable=False, comment="数据源类型"), # Model: String(50), Original Migration: String(255) named "数据源表名"
        sa.Column('field_type', sa.String(length=50), nullable=False, comment="字段类型"),
        sa.Column('display_order', sa.Integer(), server_default='0', nullable=True, comment="显示顺序"),
        sa.Column('is_visible', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否可见"),
        sa.Column('is_sortable', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否可排序"),
        sa.Column('is_filterable', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否可筛选"),
        sa.Column('width', sa.Integer(), nullable=True, comment="列宽"),
        sa.Column('formatting_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="格式化配置"),
        sa.Column('calculation_formula', sa.Text(), nullable=True, comment="计算公式"),
        sa.ForeignKeyConstraint(['template_id'], ['config.report_templates.id'], name='fk_report_fields_template_id', ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id', name='pk_report_fields'),
        schema='config'
    )

    # 6. report_executions
    op.create_table('report_executions',
        sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
        sa.Column('template_id', sa.BigInteger(), nullable=False),
        sa.Column('execution_params', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="执行参数"),
        sa.Column('status', sa.String(length=20), server_default='pending', nullable=True, comment="执行状态"),
        sa.Column('result_count', sa.Integer(), nullable=True, comment="结果数量"),
        sa.Column('execution_time', sa.DECIMAL(precision=10, scale=3), nullable=True, comment="执行时间(秒)"),
        sa.Column('error_message', sa.Text(), nullable=True, comment="错误信息"),
        sa.Column('file_path', sa.String(length=500), nullable=True, comment="导出文件路径"),
        sa.Column('file_size', sa.BigInteger(), nullable=True, comment="文件大小(字节)"),
        sa.Column('file_format', sa.String(length=20), nullable=True, comment="文件格式"), # Added in auxiliary, not in model directly
        sa.Column('executed_by', sa.BigInteger(), nullable=True, comment="执行者"),
        sa.Column('executed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment="执行时间"),
        sa.ForeignKeyConstraint(['template_id'], ['config.report_templates.id'], name='fk_report_executions_template_id'),
        sa.ForeignKeyConstraint(['executed_by'], ['security.users.id'], name='fk_report_executions_executed_by_users'),
        sa.PrimaryKeyConstraint('id', name='pk_report_executions'),
        schema='config'
    )
    op.create_index('idx_report_executions_template', 'report_executions', ['template_id'], schema='config', unique=False)
    op.create_index('idx_report_executions_user_time', 'report_executions', ['executed_by', 'executed_at'], schema='config', unique=False)
    op.create_index('idx_report_executions_status', 'report_executions', ['status'], schema='config', unique=False)

    # 7. report_data_source_access_logs
    op.create_table('report_data_source_access_logs',
        sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
        sa.Column('data_source_id', sa.BigInteger(), nullable=False),
        sa.Column('user_id', sa.BigInteger(), nullable=False),
        sa.Column('access_type', sa.String(length=20), nullable=False, comment="访问类型: view, query, export"),
        sa.Column('access_result', sa.String(length=20), nullable=False, comment="访问结果: success, failed, denied"),
        sa.Column('query_params', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="查询参数"),
        sa.Column('result_count', sa.Integer(), nullable=True, comment="返回记录数"),
        sa.Column('execution_time', sa.DECIMAL(precision=10, scale=3), nullable=True, comment="执行时间(秒)"),
        sa.Column('error_message', sa.Text(), nullable=True, comment="错误信息"),
        sa.Column('ip_address', sa.String(length=45), nullable=True, comment="IP地址"),
        sa.Column('user_agent', sa.String(length=500), nullable=True, comment="用户代理"),
        sa.Column('accessed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment="访问时间"),
        sa.ForeignKeyConstraint(['data_source_id'], ['config.report_data_sources.id'], name='fk_rds_access_logs_ds_id'),
        sa.ForeignKeyConstraint(['user_id'], ['security.users.id'], name='fk_rds_access_logs_user_id'),
        sa.PrimaryKeyConstraint('id', name='pk_report_data_source_access_logs'),
        schema='config'
    )
    op.create_index('idx_access_log_data_source', 'report_data_source_access_logs', ['data_source_id'], schema='config', unique=False)
    op.create_index('idx_access_log_user', 'report_data_source_access_logs', ['user_id'], schema='config', unique=False)
    op.create_index('idx_access_log_accessed_at', 'report_data_source_access_logs', ['accessed_at'], schema='config', unique=False)
    op.create_index('idx_access_log_type_result', 'report_data_source_access_logs', ['access_type', 'access_result'], schema='config', unique=False)


    # 8. report_permissions
    op.create_table('report_permissions',
        sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
        sa.Column('subject_type', sa.String(length=20), nullable=False, comment="主体类型: user, role, department"),
        sa.Column('subject_id', sa.BigInteger(), nullable=False, comment="主体ID"),
        sa.Column('object_type', sa.String(length=20), nullable=False, comment="对象类型: data_source, template, field"),
        sa.Column('object_id', sa.BigInteger(), nullable=False, comment="对象ID"),
        sa.Column('permission_type', sa.String(length=20), nullable=False, comment="权限类型: read, write, execute, export, admin"),
        sa.Column('is_granted', sa.Boolean(), server_default=sa.text('true'), nullable=True, comment="是否授权"),
        sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment="权限条件"),
        sa.Column('granted_by', sa.BigInteger(), nullable=True, comment="授权者"),
        sa.Column('granted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment="授权时间"),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment="过期时间"),
        sa.ForeignKeyConstraint(['granted_by'], ['security.users.id'], name='fk_report_permissions_granted_by_users'),
        sa.PrimaryKeyConstraint('id', name='pk_report_permissions'),
        schema='config'
    )
    op.create_index('idx_report_permissions_subject', 'report_permissions', ['subject_type', 'subject_id'], schema='config', unique=False)
    op.create_index('idx_report_permissions_object', 'report_permissions', ['object_type', 'object_id'], schema='config', unique=False)
    op.create_index('idx_report_permissions_type', 'report_permissions', ['permission_type'], schema='config', unique=False)

    # 9. report_user_preferences
    op.create_table('report_user_preferences',
        sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
        sa.Column('user_id', sa.BigInteger(), nullable=False),
        sa.Column('preference_type', sa.String(length=50), nullable=False, comment="偏好类型: layout, filter, sort, export"),
        sa.Column('object_type', sa.String(length=20), nullable=True, comment="对象类型: template, data_source"),
        sa.Column('object_id', sa.BigInteger(), nullable=True, comment="对象ID"),
        sa.Column('preference_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment="偏好配置"),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment="创建时间"),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True, comment="更新时间"),
        sa.ForeignKeyConstraint(['user_id'], ['security.users.id'], name='fk_report_user_preferences_user_id'),
        sa.PrimaryKeyConstraint('id', name='pk_report_user_preferences'),
        sa.UniqueConstraint('user_id', 'preference_type', 'object_type', 'object_id', name='uq_user_preference'),
        schema='config'
    )
    op.create_index('idx_user_preferences_user', 'report_user_preferences', ['user_id'], schema='config', unique=False)
    op.create_index('idx_user_preferences_type', 'report_user_preferences', ['preference_type'], schema='config', unique=False)

    # ### end Alembic commands ###

# Downgrade functions for indexes that were in original migrations but not explicitly in models' __table_args__
# (Most are covered above based on model __table_args__ or direct index creation in auxiliary migrations)
# For example, uq_data_source_schema_table for report_data_sources was a UniqueConstraint in the first migration,
# but the model ReportDataSource only has a non-unique index on schema_name, table_name.
# I've opted to recreate based on the model's Index definition and added a separate unique constraint for 'code'.
# This ensures the downgrade matches the current model structure as closely as possible.
