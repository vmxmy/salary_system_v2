"""feat: Update HR models, add Position, PersonnelCategory, EmployeeAppraisal v5

Revision ID: 427d09a2fdee
Revises: d303bdd22b52
Create Date: 2025-05-18 12:28:28.197346

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = '427d09a2fdee'
down_revision: Union[str, None] = 'd303bdd22b52'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # --- Schema: hr ---

    # 1. Create hr.positions table
    op.create_table('positions',
    sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
    sa.Column('code', sa.String(length=50), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('parent_position_id', sa.BigInteger(), nullable=True),
    sa.Column('effective_date', sa.Date(), server_default=sa.text('CURRENT_DATE'), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('TRUE'), nullable=False),
    sa.ForeignKeyConstraint(['parent_position_id'], ['hr.positions.id'], name='fk_position_parent_id', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code', name='uq_positions_code'), # Assuming code should be unique if not nullable
    schema='hr'
    )

    # 2. Create hr.employee_appraisals table
    op.create_table('employee_appraisals',
    sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
    sa.Column('employee_id', sa.BigInteger(), nullable=False),
    sa.Column('appraisal_year', sa.Integer(), nullable=False),
    sa.Column('appraisal_result_lookup_id', sa.BigInteger(), nullable=False),
    sa.Column('appraisal_date', sa.Date(), nullable=True),
    sa.Column('remarks', sa.Text(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), # onupdate=func.now() is handled by SQLAlchemy, not directly in Alembic DDL for server_default
    sa.ForeignKeyConstraint(['appraisal_result_lookup_id'], ['config.lookup_values.id'], name='fk_appraisal_result_id', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['employee_id'], ['hr.employees.id'], name='fk_appraisal_employee_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('employee_id', 'appraisal_year', name='uq_employee_appraisal_year'),
    schema='hr'
    )

    # 3. Rename hr.job_titles to hr.personnel_categories
    op.rename_table('job_titles', 'personnel_categories', schema='hr')
    print("--- Upgraded: Renamed table hr.job_titles to hr.personnel_categories ---")

    # Adjustments for renamed table hr.personnel_categories (formerly hr.job_titles)
    # Perform these operations outside of a batch context for clearer control over schema in FK

    # Step 3a: Rename the parent reference column
    try:
        op.alter_column('personnel_categories', 
                        'parent_job_title_id', 
                        new_column_name='parent_category_id', 
                        schema='hr', # Specify schema for alter_column on the table
                        existing_type=sa.BigInteger(), 
                        nullable=True)
        print("--- Upgraded: Renamed column 'parent_job_title_id' to 'parent_category_id' in hr.personnel_categories ---")
    except Exception as e_alter:
        print(f"--- Upgraded: Info/Warning during alter_column('parent_job_title_id' to 'parent_category_id'): {e_alter}. This might be okay if column was already correctly named or did not exist as 'parent_job_title_id'. ---")

    # Step 3b: Create the definitive self-referencing foreign key
    try:
        op.create_foreign_key(
            'fk_personnel_category_parent_id',    # Constraint name
            'personnel_categories',               # Source table name
            'personnel_categories',               # Remote table name (SHOULD be schema-qualified if different, but for self-ref, direct name might work if source_schema is set)
            ['parent_category_id'],               # Local columns
            ['id'],                               # Remote columns
            source_schema='hr',                   # Schema of the source table (personnel_categories)
            referent_schema='hr',                 # Schema of the remote table (personnel_categories for self-ref)
            ondelete='SET NULL'
        )
        print("--- Upgraded: Created FK 'fk_personnel_category_parent_id' on hr.personnel_categories.parent_category_id ---")
    except Exception as e_create_fk:
        print(f"--- Upgraded: Info/Warning during create_foreign_key for 'fk_personnel_category_parent_id': {e_create_fk}. This might be okay if it already exists identically. ---")

    # 4. Add columns to hr.employees
    with op.batch_alter_table('employees', schema='hr') as batch_op:
        batch_op.add_column(sa.Column('ethnicity', sa.String(length=100), nullable=True))
        batch_op.add_column(sa.Column('first_work_date', sa.Date(), nullable=True))
        batch_op.add_column(sa.Column('interrupted_service_years', sa.Numeric(precision=4, scale=2), nullable=True))
        batch_op.add_column(sa.Column('personnel_category_id', sa.BigInteger(), nullable=True))
        batch_op.add_column(sa.Column('actual_position_id', sa.BigInteger(), nullable=True))
        
        batch_op.create_foreign_key('fk_employee_personnel_category_id', 
                                   'personnel_categories',  # MODIFIED: Remove schema qualifier
                                   ['personnel_category_id'], 
                                   ['id'], 
                                   ondelete='SET NULL',
                                   referent_schema='hr')  # ADD: Correctly specify schema for remote table
        batch_op.create_foreign_key('fk_employee_actual_position_id', 
                                   'positions', # MODIFIED: Remove schema qualifier
                                   ['actual_position_id'], 
                                   ['id'], 
                                   ondelete='SET NULL',
                                   referent_schema='hr')  # ADD: Correctly specify schema for remote table

    # 5. Add columns to hr.employee_job_history
    with op.batch_alter_table('employee_job_history', schema='hr') as batch_op:
        batch_op.add_column(sa.Column('position_id', sa.BigInteger(), nullable=True))
        batch_op.create_foreign_key('fk_job_history_position_id', 
                                   'positions', # MODIFIED: Remove schema qualifier
                                   ['position_id'], 
                                   ['id'], 
                                   ondelete='RESTRICT',
                                   referent_schema='hr')  # ADD: Correctly specify schema for remote table
        
        batch_op.add_column(sa.Column('personnel_category_id', sa.BigInteger(), nullable=True))
        batch_op.create_foreign_key('fk_job_history_personnel_category_id', 
                                   'personnel_categories', # MODIFIED: Remove schema qualifier
                                   ['personnel_category_id'], 
                                   ['id'], 
                                   ondelete='RESTRICT',
                                   referent_schema='hr')  # ADD: Correctly specify schema for remote table


    # --- Schema: config ---

    # 6. Add parent_lookup_value_id to config.lookup_values
    with op.batch_alter_table('lookup_values', schema='config') as batch_op:
        batch_op.add_column(sa.Column('parent_lookup_value_id', sa.BigInteger(), nullable=True))
        batch_op.create_foreign_key('fk_lookup_value_parent_id', 
                                   'lookup_values', 
                                   ['parent_lookup_value_id'], 
                                   ['id'], 
                                   ondelete='SET NULL',
                                   referent_schema='config')  # ADD: Fix self-reference to include correct schema

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # --- Schema: config ---
    with op.batch_alter_table('lookup_values', schema='config') as batch_op:
        batch_op.drop_constraint('fk_lookup_value_parent_id', type_='foreignkey')
        batch_op.drop_column('parent_lookup_value_id')

    # --- Schema: hr ---
    with op.batch_alter_table('employee_job_history', schema='hr') as batch_op:
        batch_op.drop_constraint('fk_job_history_personnel_category_id', type_='foreignkey')
        batch_op.drop_column('personnel_category_id')
        batch_op.drop_constraint('fk_job_history_position_id', type_='foreignkey')
        batch_op.drop_column('position_id')

    with op.batch_alter_table('employees', schema='hr') as batch_op:
        batch_op.drop_constraint('fk_employee_actual_position_id', type_='foreignkey')
        batch_op.drop_constraint('fk_employee_personnel_category_id', type_='foreignkey')
        batch_op.drop_column('actual_position_id')
        batch_op.drop_column('personnel_category_id')
        batch_op.drop_column('interrupted_service_years')
        batch_op.drop_column('first_work_date')
        batch_op.drop_column('ethnicity')

    # Adjustments for hr.personnel_categories (to be renamed to hr.job_titles)
    # Perform these outside batch for clarity
    try:
        op.drop_constraint('fk_personnel_category_parent_id', 'personnel_categories', schema='hr', type_='foreignkey')
        print("--- Downgraded: Dropped FK 'fk_personnel_category_parent_id' from hr.personnel_categories ---")
    except Exception as e_downgrade_drop_fk:
        print(f"--- Downgraded: Info/Warning: Could not drop FK 'fk_personnel_category_parent_id': {e_downgrade_drop_fk} ---")

    try:
        op.alter_column('personnel_categories',
                        'parent_category_id', 
                        new_column_name='parent_job_title_id', 
                        schema='hr',
                        existing_type=sa.BigInteger(), 
                        nullable=True)
        print("--- Downgraded: Renamed column 'parent_category_id' back to 'parent_job_title_id' in hr.personnel_categories ---")
    except Exception as e_downgrade_alter:
        print(f"--- Downgraded: Info/Warning during alter_column('parent_category_id' to 'parent_job_title_id'): {e_downgrade_alter}. ---")
        
    print("--- Downgraded: Skipping recreation of an assumed original FK on parent_job_title_id as its original definition is uncertain. Table will be renamed next. ---")

    op.rename_table('personnel_categories', 'job_titles', schema='hr')
    print("--- Downgraded: Renamed table hr.personnel_categories back to hr.job_titles ---")
    
    op.drop_table('employee_appraisals', schema='hr')
    op.drop_table('positions', schema='hr')
    
    # ### end Alembic commands ###
