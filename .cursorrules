Rules:

# Rules from /Users/xumingyang/app/高新区工资信息管理/salary_system/.roo/rules/rules.md:
# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.roo/rules/rules.md` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information

# Scratchpad

## 422 错误修复任务 ✅ 已完成

### 问题分析：
- [X] **根本原因**：前端 API 调用中 `size=200` 超出了后端验证限制（最大 100）
- [X] **次要问题**：payroll 路由转发到 config 模块时参数名不匹配

### 修复措施：
- [X] **修复参数验证问题**：将 `payrollBulkImportApi.ts` 中的 `size: 200` 改为 `size: 100`
- [X] **修复路由转发问题**：
  - 将 payroll 路由中的 `is_enabled` 参数改为 `is_active`
  - 修正所有转发函数的导入路径和参数映射
  - 确保正确调用 config 模块的具体路由函数

### 验证结果：
- [X] API 调用 `GET /v2/config/payroll-component-definitions?is_active=true&size=100` 现在返回正常数据
- [X] 前端薪资批量导入页面应该可以正常加载初始数据

**结论**：422 错误已完全解决，前端可以正常获取薪资组件定义数据。
# 后端阻塞全面排查任务计划

## 目标
系统性排查后端所有可能导致阻塞和性能瓶颈的点，定位并消除影响接口响应速度的根因。

---

## 步骤总览

1. **日志与监控准备**
   - [X] 集成全局请求耗时日志
   - [X] 集成SQL执行耗时日志
   - [ ] 部署数据库连接数和慢SQL监控脚本

2. **接口级阻塞检测**
   - [ ] 批量压测所有核心API，收集耗时分布
   - [ ] 自动检测接口中是否有长时间等待（如外部API、sleep、死循环）

3. **线程/进程池与异步阻塞检测**
   - [ ] 检查uvicorn/gunicorn等进程/线程池配置与实际利用率
   - [ ] 检查是否有协程/线程/进程阻塞

4. **数据库层阻塞检测**
   - [ ] 定时采集pg_stat_activity，分析长事务、锁等待、连接池耗尽等现象
   - [ ] 自动分析慢SQL和锁等待

5. **代码级阻塞点扫描**
   - [ ] 静态扫描后端代码，查找常见阻塞模式（如time.sleep、requests同步调用、死循环等）

---

## 检测脚本设计

### 1. 数据库连接与慢SQL监控脚本
- 定时采集活跃连接、慢SQL、锁等待，输出到日志或报警

### 2. 接口批量压测与耗时分析脚本
- 自动批量请求所有API，统计耗时分布，发现慢接口

### 3. 代码静态阻塞点扫描脚本
- 扫描后端代码，查找阻塞性调用（如time.sleep、requests、subprocess、死循环等）

---

## 执行指导

### 步骤1：部署数据库监控脚本

1. 创建 `tools/db_monitor.py`，内容如下（每分钟采集一次，输出到日志）：

```python
import time
import psycopg2
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

DSN = "dbname=salary_system_v2 user=salary_system_v2 password=810705 host=10.10.10.16 port=5432"

def monitor():
    while True:
        try:
            conn = psycopg2.connect(DSN)
            cur = conn.cursor()
            # 活跃连接数
            cur.execute("SELECT count(*) FROM pg_stat_activity WHERE state = 'active';")
            active = cur.fetchone()[0]
            # 总连接数
            cur.execute("SELECT count(*) FROM pg_stat_activity;")
            total = cur.fetchone()[0]
            # 慢SQL
            cur.execute(\"""
                SELECT pid, query, now() - query_start AS duration
                FROM pg_stat_activity
                WHERE state != 'idle' AND now() - query_start > interval '5 seconds'
                ORDER BY duration DESC LIMIT 5;
            \""")
            slow = cur.fetchall()
            logging.info(f"Active: {active}, Total: {total}, Slow: {slow}")
            cur.close()
            conn.close()
        except Exception as e:
            logging.error(f"DB monitor error: {e}")
        time.sleep(60)

if __name__ == "__main__":
    monitor()
```

2. 在服务器后台运行该脚本，持续采集数据库状态。

---

### 步骤2：接口批量压测与耗时分析

1. 创建 `tools/api_batch_tester.py`，内容如下：

```python
import requests
import time
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

API_LIST = [
    "/users/17",
    "/config/lookup-values-public?lookup_type_code=GENDER",
    "/views-optimized/departments",
    "/simple-payroll/periods",
    # ...补充所有核心API
]
BASE_URL = "http://localhost:8000"  # 修改为实际后端地址

def test_apis():
    for path in API_LIST:
        url = BASE_URL + path
        try:
            start = time.time()
            resp = requests.get(url, timeout=30)
            elapsed = (time.time() - start) * 1000
            logging.info(f"{url} - {resp.status_code} - {elapsed:.2f}ms")
        except Exception as e:
            logging.error(f"{url} - ERROR: {e}")

if __name__ == "__main__":
    test_apis()
```

2. 执行该脚本，收集所有API的耗时分布，重点关注>2s的慢接口。

---

### 步骤3：代码静态阻塞点扫描

1. 创建 `tools/blocking_code_scanner.py`，内容如下：

```python
import os
import re

BLOCK_PATTERNS = [
    r"time\.sleep\(",
    r"requests\.(get|post|put|delete)\(",
    r"subprocess\.",
    r"while\s+True",
    r"for\s+\w+\s+in\s+iter\(",
    r"threading\.Lock\(",
    r"multiprocessing\.",
    r"asyncio\.sleep\(",
    r"await\s+asyncio\.sleep\(",
]

def scan_file(filepath):
    with open(filepath, "r", encoding="utf-8") as f:
        lines = f.readlines()
    for i, line in enumerate(lines, 1):
        for pat in BLOCK_PATTERNS:
            if re.search(pat, line):
                print(f"{filepath}:{i}: {line.strip()}")

def scan_dir(root):
    for dirpath, _, files in os.walk(root):
        for file in files:
            if file.endswith(".py"):
                scan_file(os.path.join(dirpath, file))

if __name__ == "__main__":
    scan_dir("webapp/")

```

2. 执行该脚本，输出所有可疑阻塞代码行，人工复查。

---

## 总结

- 先部署数据库监控，持续关注连接与慢SQL
- 再批量压测API，定位慢接口
- 最后静态扫描代码，查找阻塞点
- 结合日志与监控，逐步定位并消除所有后端阻塞风险

如需自动化脚本或具体操作指导，可随时执行上述脚本并反馈结果，后续可协助分析和优化。